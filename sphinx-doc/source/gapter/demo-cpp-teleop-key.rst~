.. _gapter-cpp-teleop-key-demos:

=======================
Key teleoperation - C++
=======================

This demo illustrate how to control Gapter using the keyboard

.. code-block:: c

 #include <termios.h>
 #include <signal.h>
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/poll.h>

 #include <boost/thread/thread.hpp>
 #include <ros/ros.h>
 #include <geometry_msgs/TwistStamped.h>

 using namespace std;
 class Gapter_Teleop
 {
    private:
        geometry_msgs::TwistStamped move;
        ros::NodeHandle n_;
        ros::Publisher move_pub;

    public:
        Gapter_Teleop()
        {
            move_pub = n_.advertise<geometry_msgs::TwistStamped>("/mavros/setpoint_velocity/cmd_vel", 1);
            
        }
        
        ~Gapter_Teleop() { }
        void keyboardLoop();
        
        void stopRobot()
        {
            move.twist.linear.x = 0.0;
            move.twist.linear.y = 0.0;
	    move.twist.linear.z = 0;
	    move.twist.angular.z=0;
            move_pub.publish(move);
        }
 };

 Gapter_Teleop* tele;
 int kfd = 0;
 struct termios cooked, raw;
 bool done;

 int main(int argc, char** argv)
 {
    ros::init(argc,argv,"tele", ros::init_options::AnonymousName | ros::init_options::NoSigintHandler);
    Gapter_Teleop tele;
    
    boost::thread t = boost::thread(boost::bind(&Gapter_Teleop::keyboardLoop, &tele));
    
    ros::spin();
    
    t.interrupt();
    t.join();
    tele.stopRobot();
    tcsetattr(kfd, TCSANOW, &cooked);
    
    return(0);
 }

 void Gapter_Teleop::keyboardLoop()
 {
    int c;
    float x_value;
    float y_value;
    float z_value;
    float z_rot_value;
    float x_speed=0.5;
    float y_speed=0.5;
    float z_speed=0.5;
    float z_rot_speed=0.5;
    bool stop = false;
    
    // get the console in raw mode
    tcgetattr(kfd, &cooked);
    memcpy(&raw, &cooked, sizeof(struct termios));
    raw.c_lflag &=~ (ICANON | ECHO);
    raw.c_cc[VEOL] = 1;
    raw.c_cc[VEOF] = 2;
    tcsetattr(kfd, TCSANOW, &raw);
    
    puts("Reading from keyboard");
    puts("Use up and down arrows for forward and backward \n use left and right arrows for left and right \n use i and , for up and down \n use  j and l for left and right rotation");
    puts("Press Shift to move faster");
    
    struct pollfd ufd;
    ufd.fd = kfd;
    ufd.events = POLLIN;
    
    for(;;)
    {
        boost::this_thread::interruption_point();
        
        // get the next event from the keyboard
        int num;
        
        if ((num = poll(&ufd, 1, 250)) < 0)
        {
            perror("poll():");
            return;
        }
        else if(num > 0)
        {
            if(read(kfd, &c, 1) < 0)
            {
                perror("read():");
                return;
            }
        }
        else
        {
            if (stop == true)
            {
                stopRobot();
                stop = false;
            }
            
            continue;
        }
        //cout<<c<<"  key"<<"\n";
        switch(c)
        {
	    case 119:
	    x_speed = x_speed*1.1 ; // speed increases by 10% in x direction
	    cout<<"current speed in X direction is : "<<x_speed<<"\n";
	    break;
	    
	    case 120:
	    x_speed = x_speed*0.9;  // speed decreased by 10% in x direction
	    cout<<"current speed in X direction is : "<<x_speed<<"\n";
     	    break;

	    case 113:
	    y_speed = y_speed*1.1 ; // speed increases by 10% in y direction
	    cout<<"current speed in Y direction is : "<<y_speed<<"\n";
	    break;
	    
	    case 122:
	    y_speed = y_speed*0.9;  // speed decreased by 10% in y direction
	    cout<<"current speed in Y direction is : "<<y_speed<<"\n";
     	    break; 

	    case 101:
	    z_speed = z_speed*1.1 ; // speed increases by 10% in z direction
	    cout<<"current speed in Z direction is : "<<z_speed<<"\n";
	    break;
	    
	    case 99:
	    z_speed = z_speed*0.9;  // speed decreased by 10% in z direction
	    cout<<"current speed in Z direction is : "<<z_speed<<"\n";
     	    break;

	    case 114:
	    z_rot_speed = z_rot_speed*1.1;  // speed increases by 10% in rotational direction
	    cout<<"current speed in Z direction is : "<<z_rot_speed<<"\n";
     	    break;

	    case 118:
	    z_rot_speed = z_rot_speed*0.9;  // speed decreases by 10% in rotational direction
	    cout<<"current speed in Z direction is : "<<z_rot_speed<<"\n";
     	    break;

            case 68: // left <=
                x_value = x_speed;
		y_value = 0;
		z_value = 0;
		z_rot_value = 0;
                stop = true;
                break;
            case 67: // right =>
                x_value = -x_speed;
		y_value = 0;
		z_value = 0;
		z_rot_value = 0;
                stop = true;
                break;

            case 66:  // backward |^|
                x_value = 0;
		y_value = y_speed;
		z_value = 0;
		z_rot_value = 0;
                stop = true;
                break;
            case 65:  // forward |v|

                x_value = 0;
		y_value = -y_speed;
		z_value = 0;
		z_rot_value = 0;
                stop = true;
                break;
            case 105: // i up
                x_value = 0;
		y_value = 0;
		z_value = z_speed;
		z_rot_value = 0;
                stop = true;
                break;
            case 44:  // , down
                x_value = 0;
		y_value = 0;
		z_value = -z_speed;
		z_rot_value = 0;
                stop = true;
                break;
                
	    case 106: // j, angular left
		x_value = 0;
		y_value = 0;
		z_value = 0;
		z_rot_value = z_rot_speed;
                stop = true;
                break;


	    case 108: // l, angular right
		x_value = 0;
		y_value = 0;
		z_value = 0;
		z_rot_value = -z_rot_speed;
                stop = true;
                break;
                
            default:
 		x_value= 0;
		y_value= 0;
		z_value= 0;
		z_rot_value= 0;
                stop = false;
        }
        move.header.frame_id="base_link";
        move.twist.linear.x = x_value;
        move.twist.linear.y = y_value;
	move.twist.linear.z = z_value;
	move.twist.angular.z= z_rot_value;

        move_pub.publish(move);
    }
 }


